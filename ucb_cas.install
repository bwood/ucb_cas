<?php
define('SUBMODULES', 'cas_ldap,cas_attributes,cas,ldapdata,ldapgroups,ldapauth');

function ucb_cas_requirements($phase) {
  $requirements = array();
  $t = get_t();
  $sub_modules = explode(',', SUBMODULES);

  if ($phase == 'install') {
    $paths = array();
    $enabled = array();

    $args = array_merge($sub_modules, array('ucb_cas'));
    /*
     *  Disable any ldap modules that aren't ours. Don't have them disable cas modules because,
     *  it's not necessary and if they get zealous and *uninstall* the cas module they'll loose
     *  their cas_users data.
     */
    $result = db_query("SELECT name, status, filename from {system} WHERE name IN (" . db_placeholders($sub_modules, 'text') . ") and filename NOT LIKE '%%%s%%'", $args);
    while ($r = db_fetch_array($result)) {
      if ((strpos($r['name'], 'cas') === FALSE) && ($r['STATUS'] = 1)) {
        $enabled[] = $r['name'];
      }
      $paths[] = preg_replace('@/[^/.]+.module$@', '', $r['filename']);
    }


    $msg = "The UCB CAS module is trying to install modules which already exist on your site.";

    if (count($enabled) > 0) {
      $msg .= "\n<p>Please disable these modules at admin/build/modules: <br/><ul><li>" . implode('<li> ', $enabled) . "</ul></p>";
    }
    if (count($paths) > 0) {
      $msg .= "\n<p>Please remove these directories and any files they contain: <br/><ul><li>" . implode('<li> ', $paths) . "</ul></p>";
    }
    //      if (!function_exists('cas_phpcas_attributes')) {
    if ((count($paths) > 0 ) || (count($enabled) > 0)) {
      $requirements['ucb_cas'] = array(
        'title' => $t('UCB CAS'),
        'value' => $t('Conflict'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t($msg),
      );
    }
    //      }

    /*
     * if they have ldap_integration installed, they should uninstall it. Otherwise
     * you loose your administrative menus for ldap_integration. Sometimes they come back
     * if you do a manual  disable/enable of ldapauth, but not always


     if (module_exists('ldapauth')) {
     $msg = "The ldapauth module is enabled on your site.  Before we can proceed you must disable AND uninstall this module.";
     if (!function_exists('cas_phpcas_attributes')) {
     $requirements['ucb_cas'] = array(
     'title' => $t('UCB CAS'),
     'value' => $t('Conflict'),
     'severity' => REQUIREMENT_ERROR,
     'description' => $t($msg),
     );
     }
     }
     */
  }


  return $requirements;
}

function ucb_cas_install() {
  global $base_url;
  /* Install modules */
  $sub_modules = explode(',', SUBMODULES);
  $ldap_msg = FALSE;
  if (module_exists('ldapauth')) $ldap_msg = TRUE;

  /*
   *  Why not just make the sub_modules dependencies of ucb_cas? Since
   *  we inject config into schemas created by these modules, we need
   *  to drupal_install_modules() so that we know for sure that the target
   *  tables exist. There are probably other ways to skin this cat...
   */
  drupal_install_modules($sub_modules);
  drupal_set_message(t("Installed ucb_cas dependencies: ") . implode(', ', $sub_modules), 'status');


  /**** Settings ****/
  /* LDAP */

  /* disable
   $prod_ldap_server = 'ldap.berkeley.edu';
   $test_ldap_server = 'ldap-test.berkeley.edu';

   //If they had ldap installed earlier they might already have ucb ldap servers defined
   //if so disable them and add ones we know to be correct.
   $result_max = db_query("SELECT MAX(sid) as max_sid from `ldapauth`");
   $max_sid = db_result($result_max);
   //var_dump($max_sid);
   //FIXME: printf *&$#!
   //$result = db_query("SELECT sid, name FROM  `ldapauth` WHERE  `server` IN (%prod, %test)", array('%prod' => $prod_ldap_server, '%test' => $test_ldap_server));
   //$result = db_query("SELECT sid, name FROM  {ldapauth} WHERE server IN (%s, %s)", array($prod_ldap_server, $test_ldap_server));
   $result = db_query("SELECT sid, name FROM  `ldapauth` WHERE  `server` IN ('$prod_ldap_server', '$test_ldap_server')");

   $i=1;
   while ($r = db_fetch_array($result)) {
   $sid = $max_sid + $i;
   $ret[] = update_sql("UPDATE ldapauth set sid = $sid, name = '". $r['name'] . "-DISABLED', status = 0 WHERE sid = " . $r['sid']);
   $i++;
   //Notify the user
   drupal_set_message(t("Your ldap servers have been updated at ") . l("/admin/settings/ldap/ldapauth/list", '/admin/settings/ldap/ldapauth/list') . '.', 'status', FALSE);
   watchdog('ucb_cas', "Replaced existing ldap server: %server", array('%server' => $r['name']), WATCHDOG_NOTICE, l(t("View LDAP Servers"), $base_url . '/admin/settings/ldap/ldapauth/list') );
   }
   */

  /*
   * ucb_envconf-6.x depends on these sids being 1 (test) and 2 (prod).
   */
  $ret_ins = db_query("INSERT INTO `ldapauth` (`sid`, `name`, `status`, `server`, `port`, `tls`, `encrypted`, `basedn`
   , `user_attr`, `mail_attr`, `binddn`, `bindpw`, `login_php`, `filter_php`, `weight`, `ldapdata_binddn`
   , `ldapdata_bindpw`, `ldapdata_rwattrs`, `ldapdata_roattrs`, `ldapdata_mappings`, `ldapdata_attrs`
   , `ldapdata_filter_php`, `ldapgroups_in_dn`, `ldapgroups_dn_attribute`, `ldapgroups_attr`, `ldapgroups_in_attr`
   , `ldapgroups_as_entries`, `ldapgroups_entries`, `ldapgroups_entries_attribute`, `ldapgroups_mappings`
   , `ldapgroups_mappings_filter`, `ldapgroups_filter_php`, `ldapgroups_groups`)
   VALUES
   (1, 'ldap-test.berkeley.edu', 1, 'ldap-test.berkeley.edu', 389, 0, 0, 'ou=people,dc=berkeley,dc=edu', 'uid', 'mail'
   , '', '', NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, NULL, NULL, NULL, 0, NULL, NULL),
   (2, 'ldap.berkeley.edu', 1, 'ldap.berkeley.edu', 389, 0, 0, 'ou=people,dc=berkeley,dc=edu', 'uid', 'mail', '', '', NULL, NULL
   , 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, NULL, NULL, NULL, 0, NULL, NULL)
   ");

  if ($ret_ins === FALSE) $ret[] = 'Failed to insert ldap_servers';

  //drush friendly links
  drupal_set_message("You can now login using cas at ". l(t("/cas"), 'cas') . '. (' . t("Do this in a different browser or logout of your admin account first.") . ')');
  drupal_set_message(t("View UCB CAS recommendations at ") . l(t("/admin/user/ucbcas"), 'admin/user/ucbcas') . '.');

  /*
   * Tried to remedy this by doing module_disable/module_enable both here and in hook_update_N.
   * Doing this manually seems to be the only way...
   */
  if ($ldap_msg === TRUE) {
    drupal_set_message("Because you were previously using the ldap_integration module, you should manually disable, then re-enable ldapauth, ldapdata and ldapgroups. Until you do this, their admin menu items may not appear. (Just disable these, do not *uninstall* them.)", 'warning');
  }

  //we need path for path_set_alias
  if (!module_exists('path')) {
    drupal_install_modules(array('path'));
    drupal_set_message("Enabling the path module.");
  }

  variable_set("cas_access",  "0");
  variable_set("cas_attributes",  array(
    'sync_every_login' => 1,
    'relations' => array(
            'name' => '[cas-ldap-displayname]',
            'mail' => '[cas-ldap-mail]',
  ),
    'ldap' => array(
            'server' => 1,
  ),
  ));
  variable_set("cas_auto_assigned_role",  array(null, null,1,0));
  variable_set("cas_cert",  "");
  variable_set("cas_changePasswordURL",  "");
  variable_set("cas_check_first",  0);
  variable_set("cas_debugfile",  "");
  variable_set("cas_domain",  "");
  variable_set("cas_exclude",  "");
  variable_set("cas_first_login_destination",  "");
  variable_set("cas_hide_email",  0);
  variable_set("cas_hide_password",  1);
  variable_set("cas_library_dir",  "CAS");
  variable_set("cas_login_drupal_invite",  "");
  variable_set("cas_login_invite",  "Log in using CalNet");
  variable_set("cas_login_message",  "Logged in via CalNet as %cas_username.");
  variable_set("cas_login_redir_message",  "");
  variable_set("cas_logout_destination",  "");
  variable_set("cas_pages",  "services/*
node/add/*
node/*/edit/*");
  variable_set("cas_pgtformat",  "plain");
  variable_set("cas_pgtpath",  "");
  variable_set("cas_port",  "443");
  variable_set("cas_proxy",  0);
  variable_set("cas_registerURL",  "");
  variable_set("cas_server",  "auth-test.berkeley.edu");
  variable_set("cas_uri",  "/cas");
  variable_set("cas_user_register",  1);
  variable_set("cas_version",  "2.0");

  //Play nicely with the ucb_mma module
  if (module_exists('ucb_mma')) {
    variable_set("cas_login_form",  "0");
  }
  else {
    variable_set("cas_login_form",  "2");
  }

  // alias logout to caslogout
  path_set_alias('caslogout', 'logout');


}

/**
 * Implementation of hook_disable().
 */
function ucb_cas_disable() {
  drupal_set_message('Note: Disabling ucb_cas does not disable its companion modules.  (However uninstalling ucb_cas *will* uninstall its companion modules. See README.txt)', 'status');
}

/**
 * Implementation of hook_uninstall().
 */
function ucb_cas_uninstall() {
  /* Remove modules */
  $sub_modules = explode(',', SUBMODULES);

  module_disable($sub_modules, TRUE);
  foreach ($sub_modules as $sm) {
    drupal_uninstall_module($sm);
  }
  drupal_set_message("Uninstalled ucb_cas dependencies: " . implode(', ', $sub_modules), 'status');
  drupal_set_message("Leaving the path module enabled.");

  /* Clear settings */
  // most settings are removed by uninstalling the sub modules.
  variable_del("ucb_cas_sub_modules");

  // remove alias logout to caslogout
  path_set_alias('caslogout', NULL);

}
/**
 * Implementation of hook_update_N().
 */
function ucb_cas_update_6101(&$sandbox = NULL) {
  $ret = array();

  module_disable(array('ldapauth'));
  module_enable(array('ldapauth', 'ldapdata', 'ldapgroups'));

  return $ret;
}
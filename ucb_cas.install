<?php
define('SUBMODULES', 'cas_ldap,cas_attributes,cas,ldapdata,ldapgroups,ldapauth');

function ucb_cas_requirements($phase) {
  $requirements = array();
  $t = get_t();
  $sub_modules = explode(',', SUBMODULES);

  if ($phase == 'install') {
    $paths = array();
    foreach ($sub_modules as $sm) {
      $path = drupal_get_path('module', $sm);
      // If ucb_cas is in the path, it's ours
      if (strpos($path, 'ucb_cas') === false) {
        if (!in_array($path, $paths)) $paths[] = $path;
      }
    }
    if (count($paths) > 0 ) {
      $msg = "The UCB CAS module is trying to install modules which already exist on your site.  <p>1. Please ensure these modules are disabled at admin/build/modules.<br/>2. Then remove these files: <br/><ul><li>" . implode('<li> ', $paths) . "</ul>";
      if (!function_exists('cas_phpcas_attributes')) {
        $requirements['cas_attributes'] = array(
        'title' => $t('UCB CAS'),
        'value' => $t('Conflict'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t($msg),
        );
      }
    }
  }
  return $requirements;
}

function ucb_cas_install() {
  global $base_url;
  /* Install modules */
  $sub_modules = explode(',', SUBMODULES);

  /*
   *  Why not just make the sub_modules dependencies of ucb_cas? Since
   *  we inject config into schemas created by these modules, we need
   *  to drupal_install_modules() so that we know for sure that the target
   *  tables exist. There are probably other ways to skin this cat...
   */
  drupal_install_modules($sub_modules);
  drupal_set_message(t("Installed ucb_cas dependencies: ") . implode(', ', $sub_modules), 'status');

  //we need path for path_set_alias
  if (!module_exists('path')) {
    drupal_install_modules(array('path'));
    drupal_set_message("Enabling the path module.");
  }
  //drush friendly links
  drupal_set_message("You can now login using cas at ". l(t("/cas"), 'cas') . '. (' . t("Do this in a different browser or logout of your admin account first.") . ')');
  drupal_set_message(t("View UCB CAS recommendations at ") . l(t("/admin/user/ucbcas"), 'admin/user/ucbcas') . '.');

  /**** Settings ****/
  /* LDAP */
  $prod_ldap_server = 'ldap.berkeley.edu';
  $test_ldap_server = 'ldap-test.berkeley.edu';

  //If they had ldap installed earlier they might already have ucb ldap servers defined
  //if so disable them and add ones we know to be correct.
  $result_max = db_query("SELECT MAX(sid) as max_sid from `ldapauth`");
  $max_sid = db_result($result_max);
  //var_dump($max_sid);
  //FIXME: printf *&$#!
  //$result = db_query("SELECT sid, name FROM  `ldapauth` WHERE  `server` IN (%prod, %test)", array('%prod' => $prod_ldap_server, '%test' => $test_ldap_server));
  //$result = db_query("SELECT sid, name FROM  {ldapauth} WHERE server IN (%s, %s)", array($prod_ldap_server, $test_ldap_server));
  $result = db_query("SELECT sid, name FROM  `ldapauth` WHERE  `server` IN ('$prod_ldap_server', '$test_ldap_server')");

  $i=1;
  while ($r = db_fetch_array($result)) {
    $sid = $max_sid + $i;
    update_sql("UPDATE ldapauth set sid = $sid, name = '". $r['name'] . "-DISABLED', status = 0 WHERE sid = " . $r['sid']);
    $i++;
    //Notify the user
    drupal_set_message(t("Your ldap servers have been updated at ") . l("/admin/settings/ldap/ldapauth/list", '/admin/settings/ldap/ldapauth/list') . '.', 'status', FALSE);
    watchdog('ucb_cas', "Replaced existing ldap server: %server", array('%server' => $r['name']), WATCHDOG_NOTICE, l(t("View LDAP Servers"), $base_url . '/admin/settings/ldap/ldapauth/list') );
  }

  /*
   * ucb_envconf-6.x depends on these sids being 1 (test) and 2 (prod). 
   */
   db_query("INSERT INTO `ldapauth` (`sid`, `name`, `status`, `server`, `port`, `tls`, `encrypted`, `basedn`
   , `user_attr`, `mail_attr`, `binddn`, `bindpw`, `login_php`, `filter_php`, `weight`, `ldapdata_binddn`
   , `ldapdata_bindpw`, `ldapdata_rwattrs`, `ldapdata_roattrs`, `ldapdata_mappings`, `ldapdata_attrs`
   , `ldapdata_filter_php`, `ldapgroups_in_dn`, `ldapgroups_dn_attribute`, `ldapgroups_attr`, `ldapgroups_in_attr`
   , `ldapgroups_as_entries`, `ldapgroups_entries`, `ldapgroups_entries_attribute`, `ldapgroups_mappings`
   , `ldapgroups_mappings_filter`, `ldapgroups_filter_php`, `ldapgroups_groups`)
   VALUES
   (1, 'ldap-test.berkeley.edu', 1, 'ldap-test.berkeley.edu', 389, 0, 0, 'ou=people,dc=berkeley,dc=edu', 'uid', 'mail'
   , '', '', NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, NULL, NULL, NULL, 0, NULL, NULL),
   (2, 'ldap.berkeley.edu', 1, 'ldap.berkeley.edu', 389, 0, 0, 'ou=people,dc=berkeley,dc=edu', 'uid', 'mail', '', '', NULL, NULL
   , 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, NULL, NULL, NULL, 0, NULL, NULL)
   ");

  variable_set("cas_access",  "0");
  variable_set("cas_attributes",  array(
    'sync_every_login' => 1,
    'relations' => array(
            'name' => '[cas-ldap-displayname]',
            'mail' => '[cas-ldap-mail]',
  ),
    'ldap' => array(
            'server' => 1,
  ),
  ));
  variable_set("cas_auto_assigned_role",  array(null, null,1,0));
  variable_set("cas_cert",  "");
  variable_set("cas_changePasswordURL",  "");
  variable_set("cas_check_first",  0);
  variable_set("cas_debugfile",  "");
  variable_set("cas_domain",  "");
  variable_set("cas_exclude",  "");
  variable_set("cas_first_login_destination",  "");
  variable_set("cas_hide_email",  0);
  variable_set("cas_hide_password",  1);
  variable_set("cas_library_dir",  "CAS");
  variable_set("cas_login_drupal_invite",  "");
  variable_set("cas_login_invite",  "Log in using CalNet");
  variable_set("cas_login_message",  "Logged in via CalNet as %cas_username.");
  variable_set("cas_login_redir_message",  "");
  variable_set("cas_logout_destination",  "");
  variable_set("cas_pages",  "services/*
node/add/*
node/*/edit/*");
  variable_set("cas_pgtformat",  "plain");
  variable_set("cas_pgtpath",  "");
  variable_set("cas_port",  "443");
  variable_set("cas_proxy",  0);
  variable_set("cas_registerURL",  "");
  variable_set("cas_server",  "auth-test.berkeley.edu");
  variable_set("cas_uri",  "/cas");
  variable_set("cas_user_register",  1);
  variable_set("cas_version",  "2.0");

  //Play nicely with the ucb_mma module
  if (module_exists('ucb_mma')) {
    variable_set("cas_login_form",  "0");
  }
  else {
    variable_set("cas_login_form",  "2");
  }

  // alias logout to caslogout
  path_set_alias('caslogout', 'logout');

}

/**
 * Implementation of hook_disable().
 */
function ucb_cas_disable() {
  drupal_set_message('Note: Disabling ucb_cas does not disable its companion modules.  (However uninstalling ucb_cas *will* uninstall its companion modules. See README.txt)', 'status');
}

/**
 * Implementation of hook_uninstall().
 */
function ucb_cas_uninstall() {
  /* Remove modules */
  $sub_modules = explode(',', SUBMODULES);

  module_disable($sub_modules, TRUE);
  foreach ($sub_modules as $sm) {
    drupal_uninstall_module($sm);
  }
  drupal_set_message("Uninstalled ucb_cas dependencies: " . implode(', ', $sub_modules), 'status');
  drupal_set_message("Leaving the path module enabled.");

  /* Clear settings */
  // most settings are removed by uninstalling the sub modules.
  variable_del("ucb_cas_sub_modules");

  // remove alias logout to caslogout
  path_set_alias('caslogout', NULL);

}

